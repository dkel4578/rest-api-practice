server:
  port: 8070

application:
  version: AppVersion 1.0.0
  title: thejoeun company

spring:
  thymeleaf :
    cache: false
  sql:
    init:
      mode: always
      # always: embeded db가 아닌 외부 db 사용시 spring boot를 실행할때 마다 data.sql schema.sql import.sql을 항상 실행
      # never: data.sql schema.sql import.sql을 실행하지 않음
      encoding: UTF-8
  datasource:
#    generate-unique-name: false
#    initialization-mode: always
#    url: jdbc:h2:mem:testdb     # H2 Embeded Memory
#    driver-class-name: org.h2.Driver # H2 connect driver
#    username: sa
#    password:
      #    url: jdbc:mysql://localhost:3306/mydb         # mysql
      #    driver-class-name: com.mysql.cj.jdbc.Driver
      #    username: root
      #    password: 1234
    url: jdbc:mariadb://localhost:3306/mydb         # mariadb
    driver-class-name: org.mariadb.jdbc.Driver
    username: root
    password: 1234
#      url: jdbc:oracle:thin:@localhost:1521:xe         # oracle
#      driver-class-name: oracle.jdbc.OracleDriver
#      username:
#      password:

  h2:
    console:
      path: /h2-console
      enabled: true
  jpa:
    show-sql: true # java코드로 짠 sql을
    defer-datasource-initialization: true # data.sql 사용을 위해서 필수적으로 등록
    properties:
      hibernate:
        format_sql: true  # sql문 pretty하게 보여줌
        use_sql_comments: true # model이 어느 디텍토리에 있는지 알려줌
    generate-ddl: false # true, false //default 는 false. true 라면 @Entity가 있는 테이블을 만듦
    hibernate: #hibernate 값이 존재하면 generate-ddl 의 값을 신경쓰지 않는다.
      ddl-auto: create  # create, create-drop, update, validate, none
      # 1. create : spring boot를 처음 실행 시 Entity로 된 클래스 및 테이블을 drop 하고 create 함
      # 2. create-drop : 위 과정을 거친 후 spring boot 종료시에 다시 drop 함
      # 3. update : 연결된 db schema 와 자바 entity 를 비교하여 다른 점이 있다면 다른 점만 ddl 코드를 생성
      # 4. validate : 연결된 db schema 와 자바 entity 를 비교하여 다른 점이 있다면 오류코드만 보여줌
      # 5. none : ddl 구문을 만들지 않음.
  mvc:
    view:
      prefix: /WEB-INF/view/
      suffix: .jsp
  devtools:
    livereload:
      enabled: true


#logging.level:
logging:
  level:
    org:
      #      hibernate: trace
      hibernate:
        orm:
          jdbc:
            bind: trace   # hibernate에서 ? 값 보기
#        SQL: debug
#        type: trace
#        type:
#          decriptor:
#            sql: trace
#    root: trace


